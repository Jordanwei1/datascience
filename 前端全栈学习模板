<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>前端全栈学习模板</title>
<base href="https://example.com/" target="_blank"> <!-- 基础链接设置 -->

<!-- 完整CSS样式库（包含所有核心知识点） -->
<style>
     /* ---------------------- 基础样式 ---------------------- */
 * { box-sizing: border-box; margin: 0; padding: 0; } /* 全局盒模型 */
body {
    font-family: 'Segoe UI', sans-serif;
    line-height: 1.6;
    color: #333;
    background: #f5f5f5;
}
.container { max-width: 1200px; margin: 0 auto; padding: 20px; }

/* ---------------------- 文本样式 ---------------------- */
.text-demo {
    font-size: 18px;
    font-weight: 400;
    font-style: italic;
    text-align: justify;
    text-decoration: underline dotted #666;
    text-transform: capitalize;
    letter-spacing: 1px;
    word-spacing: 2px;
    line-height: 2;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
}

/* ---------------------- 盒模型 ---------------------- */
.box-model {
    width: 300px;
    height: 200px;
    padding: 20px 30px;
    border: 5px solid #007bff;
    border-radius: 10px;
    margin: 30px auto;
    background: #fff;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    outline: 3px dashed #ff6b6b;
}

/* ---------------------- 弹性布局 ---------------------- */
.flex-container {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-wrap: wrap;
    height: 400px;
}
.flex-item {
    width: 150px;
    height: 150px;
    background: #4ecdc4;
    margin: 10px;
    flex-shrink: 0;
}

/* ---------------------- 网格布局 ---------------------- */
.grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 150px);
    grid-gap: 20px;
    margin: 40px 0;
}
.grid-item {
    background: #c7f464;
    padding: 20px;
    border-radius: 8px;
}

/* ---------------------- 定位系统 ---------------------- */
.position-container {
    position: relative;
    height: 500px;
}
.fixed-element { position: fixed; top: 20px; right: 20px; }
.absolute-element { position: absolute; bottom: 30px; left: 50px; }
.sticky-element { position: sticky; top: 0; background: #fff; }

/* ---------------------- 动画与过渡 ---------------------- */
.animated-box {
    width: 100px;
    height: 100px;
    background: #ff6b6b;
    transition: all 0.5s ease;
    animation: bounce 2s infinite;
}
.animated-box:hover { transform: scale(1.2); }

@keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
}

/* ---------------------- 响应式设计 ---------------------- */
@media (max-width: 768px) {
    .grid-container { grid-template-columns: 1fr 1fr; }
    .flex-item { width: 100%; max-width: 300px; }
}
</style>
</head>

<body>
<!-- ---------------------- HTML基础标签 ---------------------- -->
<header class="sticky-element">
<h1>前端技术栈学习模板</h1>
<nav>
<a href="#html">HTML</a> |
<a href="#css">CSS</a> |
<a href="#js">JavaScript</a>
</nav>
</header>

<main class="container">
<!-- ---------------------- HTML语义化标签 ---------------------- -->
<section id="html" class="text-demo">
<h2>HTML核心知识点</h2>
<article>
<h3>语义化标签</h3>
<p>
<header>页眉区域</header>
<nav>导航链接</nav>
<article>文章内容</article>
<aside>侧边栏</aside>
<footer>页脚</footer>
</p>
</article>

<h3>表单元素</h3>
<form action="#">
<label for="name">姓名:</label>
<input type="text" id="name" required>

<label for="email">邮箱:</label>
<input type="email" id="email" pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$">

<textarea rows="5" cols="30" placeholder="留言"></textarea>

<button type="submit">提交</button>
</form>
</section>

<!-- ---------------------- CSS演示区域 ---------------------- -->
<section id="css">
<h2>CSS核心知识点</h2>
<div class="box-model">
                      盒模型演示：包含content/padding/border/margin<br>
                                                                   border-radius: 10px<br>
                                                                                       box-shadow: 0 4px 8px rgba(0,0,0,0.2)
</div>

<div class="flex-container">
<div class="flex-item">弹性项1</div>
<div class="flex-item">弹性项2</div>
<div class="flex-item">弹性项3</div>
</div>

<div class="grid-container">
<div class="grid-item">网格项1</div>
<div class="grid-item">网格项2</div>
<div class="grid-item">网格项3</div>
</div>
</section>

<!-- ---------------------- JavaScript演示区域 ---------------------- -->
<section id="js">
<h2>JavaScript核心知识点</h2>
<div class="animated-box" id="js-demo"></div>

<h3>基础语法</h3>
<pre>
<code>
// 变量声明
   let age = 20;
const PI = 3.14;

// 数组操作
   let fruits = ['苹果', '香蕉', '橙子'];
fruits.push('葡萄');

// 对象定义
   let user = {
    name: '张三',
    age: 25,
    sayHi() {
console.log(`你好，我是${this.name}`);
}
};
</code>
</pre>

<h3>DOM操作</h3>
<button id="dom-btn">点击改变背景色</button>
<p id="status">当前状态：未点击</p>
</section>
</main>

<!-- ---------------------- 完整JavaScript代码 ---------------------- -->
<script>
// ---------------------- 基础语法 ----------------------
// 变量与数据类型
   let num = 10;          // 数值类型
                             let str = 'Hello World'; // 字符串
                                                         let isReady = true;    // 布尔值
                                                                                   let arr = [1, 2, 3, 4]; // 数组
                                                                                                              let obj = { key: 'value' }; // 对象

// 函数定义
   function add(a, b) {
    return a + b;
}
const multiply = (a, b) => a * b; // 箭头函数

// ---------------------- DOM操作 ----------------------
   const domBtn = document.getElementById('dom-btn');
const status = document.getElementById('status');
const jsDemo = document.getElementById('js-demo');

domBtn.addEventListener('click', function() {
// 改变背景色
document.body.style.backgroundColor =
`rgb(${Math.random()*255}, ${Math.random()*255}, ${Math.random()*255})`;

// 更新状态文本
status.textContent = `当前时间：${new Date().toLocaleTimeString()}`;

// 动画元素移动
jsDemo.style.marginLeft = `${Math.random()*300}px`;
});

// ---------------------- 异步编程 ----------------------
// Promise示例
   function fetchData() {
    return new Promise((resolve) => {
setTimeout(() => {
resolve('数据加载完成！');
}, 2000);
});
}

fetchData().then(data => {
                           console.log(data);
                           status.textContent = data;
                       });

// async/await示例
         async function asyncDemo() {
    let result = await fetchData();
console.log('异步结果:', result);
}
asyncDemo();

// ---------------------- 事件处理 ----------------------
   jsDemo.addEventListener('mouseover', function() {
this.style.backgroundColor = '#4a90e2';
});

jsDemo.addEventListener('mouseout', function() {
this.style.backgroundColor = '#ff6b6b';
});

// ---------------------- 原型与继承 ----------------------
   class Animal {
   constructor(name) {
       this.name = name;
   }
   speak() {
       console.log(`${this.name}发出声音`);
   }
   }

class Dog extends Animal {
constructor(name) {
super(name);
}
bark() {
    console.log(`${this.name}汪汪叫`);
}
}

const myDog = new Dog('旺财');
myDog.speak(); // 输出：旺财发出声音
                  myDog.bark();  // 输出：旺财汪汪叫
</script>
</body>
</html>
