-- 1 行转列 student2 列转行 student

-- 2  连续最大N user_log

-- 3 留存 留存率  tb_cuid_1d

-- 4 TopN emp2

-- 5 窗口函数 中位数 截断平均数 emp

-- 6 找重复数据





create table if not exists student2(
name varchar(20),
语文 int,
数学 int,
体育 int);
insert into student2 values
('张三',76,86,88),
('李四',78,80,90);

-- 行转列
select *
from(select name
    ,"语文" as subject
    ,max(语文) as score
    from student2
    group by name
    union all
    select name
    ,"数学" as subject
    ,max(数学) as score
    from student2
    group by name
    union all
    select name
    ,"体育" as subject
    ,max(体育) as score
    from student2
    group by name) as t1
order by name
;


create table if not exists student(
name varchar(20),
subject varchar(10),
score int(10));

insert into student values
('张三','语文',76),
('张三','数学',86),
('张三','体育',88),
('李四','语文',78),
('李四','数学',80),
('李四','体育',90);

-- 列转行

select name
        ,sum(case when subject="语文" then score else 0 end) as "语文"
        ,sum(case when subject="数学" then score else 0 end) as "数学"
        ,sum(case when subject="体育" then score else 0 end) as "体育"
from student
group by name
;




create table table1(year int,month int ,amount double);
insert into table1 values (1991,1,1.1);
insert into table1 values (1991,2,1.2);
insert into table1 values (1991,3,1.3);
insert into table1 values (1991,4,1.4);
insert into table1 values (1992,1,2.1);
insert into table1 values (1992,2,2.2);
insert into table1 values (1992,3,2.3);
insert into table1 values (1992,4,2.4);

select year
        ,sum(case when month = 1 then amount else 0 end) as m1
        ,sum(case when month = 2 then amount else 0 end) as m2
        ,sum(case when month = 3 then amount else 0 end) as m3
        ,sum(case when month = 4 then amount else 0 end) as m4
from table1
group by year
;


create table table2(DDate date, shengfu varchar(20));
insert into table2 values('2015-05-09', '胜');
insert into table2 values('2015-05-09', '胜');
insert into table2 values('2015-05-09', '负');
insert into table2 values('2015-05-09', '负');
insert into table2 values('2015-05-10', '胜');
insert into table2 values('2015-05-10', '负');
insert into table2 values('2015-05-10', "负");

select DDate
        ,sum(case when shengfu = '胜' then 1 else 0 end) as '胜'
        ,sum(case when shengfu = '负' then 1 else 0 end) as '负'
from table2
group by DDate
;


create table if not exists user_log(
userid varchar(20),
login_data date);

insert into user_log values
('yh001','2019-11-25'),
('yh001','2019-11-26'),
('yh001','2019-11-27'),
('yh001','2019-12-01'),
('yh001','2019-12-02'),
('yh001','2019-12-26'),
('yh001','2019-12-27'),
('yh002','2019-12-29'),
('yh002','2019-12-30');

-- 连续N 连续最大N
select distinct userid
        ,max(num) as max_num
from(select userid
            ,dsub
            ,count(1) as num
    from(select userid
                ,date_sub(login_data,interval rk day) as dsub
        from(select userid
                ,login_data
                ,row_number() over (partition by userid order by login_data) as rk
            from user_log) as t1) as t2
    group by userid, dsub) as t3
group by userid
;


create table if not exists oppo(
name varchar(20),
date date);

insert into oppo values
('张三','2021-01-01'),
('张三','2021-01-02'),
('张三','2021-01-03'),
('张三','2021-01-02'),
('李四','2021-01-01'),
('李四','2021-01-02'),
('王五','2021-01-03'),
('王五','2021-01-02'),
('王五','2021-01-02');

select name
,max(num) as max_num
from(select name
    ,dsub
    ,count(1) as num
    from(select name
        ,date_sub(date,interval rk day) as dsub
        from(select name
                ,date
                ,row_number() over (partition by name order by date) as rk
            from oppo)t1)t2
    group by name, dsub)t3
group by name
;




create table if not exists tb_cuid_1d(
cuid varchar(20),
os varchar(20),
soft_version varchar(20),
event_day varchar(20),
timestamp int,
duration decimal
);

insert into tb_cuid_1d values
    (1,'android',1,'2020-04-01',1234567,100),
    (1,'android',1,'2020-04-02',1234567,100),
    (1,'android',1,'2020-04-08',1234567,100),
    (2,'android',1,'2020-04-01',1234567,100),
    (3,'android',1,'2020-04-02',1234567,100);

-- 留存
select '2020-04-01' as '首次登陆日期'
        ,count(cuid) as uv_1
        ,count(case when cnt_2>0 then 1 else null end) as uv_2
        ,count(case when cnt_8>0 then 1 else null end) as uv_7
from(select cuid
            ,count(case when event_day='2020-04-01' then 1 else null end) as cnt_1
            ,count(case when event_day='2020-04-02' then 1 else null end) as cnt_2
            ,count(case when event_day='2020-04-08' then 1 else null end) as cnt_8
    from tb_cuid_1d
    where event_day in ('2020-04-01','2020-04-02','2020-04-08')
    group by cuid
    having cnt_1>0)t1
;

-- 留存 留存率
select '2020-04-01' as '首日登陆日期'
        ,count(t1.cuid) as uv_1
        ,count(t2.cuid) as uv_2
        ,count(t8.cuid) as uv_7
        ,count(t2.cuid)/count(t1.cuid) as rate_2
        ,count(t8.cuid)/count(t1.cuid) as rate_7
from(select distinct cuid
        from tb_cuid_1d
        where event_day = '2020-04-01') as t1
left join(select distinct cuid
            from tb_cuid_1d
            where event_day = '2020-04-02') as t2 on t1.cuid = t2.cuid
left join(select distinct cuid
            from tb_cuid_1d
            where event_day = '2020-04-08') as t8 on t1.cuid = t8.cuid
;

create table score(cid int, sname varchar(20), score int);
insert into score values
(1,'张三',60),
(1,'李四',70),
(1,'王五',80),
(1,'赵六',90),
(2,'安安',80),
(2,'平平',90);

select *
    -- ,sum(score) over(partition by cid) as totalscore
    -- ,sum(score) over(partition by cid order by score) as "累计加分"
    -- ,row_number() over (partition by cid order by score) as "序号排序"
    -- ,rank() over (partition by cid order by score) as "序号排序2"
    -- ,dense_rank() over (partition by cid order by score) as "序号排序3"
    ,lag(score,2,0) over (partition by cid order by score) as "低一名的分数"
    ,lead(score,1,0) over (partition by cid order by score) as "高一名的分数"
from score
;


create table emp(name varchar(12), month int, amt int);
insert into emp values
('张三', '01', 100),
('李四', '02', 120),
('王五', '03', 150),
('赵六', '04', 500),
('张三', '05', 400),
('李四', '06', 350),
('王五', '07', 180),
('赵六', '08', 400);



-- 中位数
select avg(amt)
from(select *
        ,row_number() over () as rn
        ,count(1) over() as n
    from emp) as t1
where rn in (n/2,n/2+1,((n+1)/2))
;

-- 截断平均数 去掉最大最小
select avg(amt)
from(select *
        ,row_number() over (order by amt) as rn
        ,row_number() over (order by amt desc) as rn_desc
    from emp) as t1
where rn <> 1 and rn_desc <>1
;


create table emp2(empno varchar(20),ename varchar(20),hiredate date,sal int,deptno int);

insert into emp2 values
( 7521 , 'ward' , '1981-02-22' , 1250 ,30 ),
( 7566 , 'jones' , '1981-04-02' , 2975 ,20 ),
( 7876 , 'adams' , '1987-07-13' , 1100 ,20 );
select *
, sal/totalsal as rate
from(select *
            ,row_number() over (partition by deptno order by sal desc) as rn
            ,sum(sal) over () as totalsal
    from emp2) as t1
;


select *
from(select ename
            ,row_number() over (partition by deptno order by sal desc) as rn
    from emp2) as t1
limit 1 offset 1
;


with t1 as (
    select name
        ,sum(amt) as sum_amt
    from emp
    group by name
),
    t2 as (
        select *
            ,row_number() over (order by sum_amt desc) as rn
            ,sum(sum_amt) over () as totalamt
        from t1
    ),
        t3 as(
            select *
                 ,sum_amt/totalamt as rate
            from t2
    )
select *
        ,case when rate <= 0.15 then '一般'
        when rate >0.15 and rate <0.35 then '中档'
        when rate >= 0.35 then '高档'
        end as "标签"
from t3
;


日期函数
    select date/time/year/week/weekday(current_timestamp);
    select extract(year from current_timestamp);

日期加减
    select date_add(current_timestamp, interval 1 year);
    select date_sub(current_timestamp, interval 1 quarter);
    select datediff/timediff(xx,xx);
    select time_to_sec(时间) -- 时间转成秒
    select to_days(current_timestamp);
    select from_days(523525)
    select str_to_date('',%Y..) --字符串转日期
    select unix_timestamp() -- 时间戳；from_timestamp
;

# 36. 查询每门功成绩最好的前两名


select *
from(select *
        ,row_number() over (partition by cname order by score desc) as rn
    from(select score
         ,cname
         ,sname
        from sc a
        left join course b on a.cid = b.cid
        left join student c on a.sid = c.sid) as t1) as t2
where rn <=2
;



# 37. 统计每门课程的学生选修人数（超过 5 人的课程才统计）。

