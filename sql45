# 1. 查询" 01 "课程比" 02 "课程成绩高的学生的信息及课程分数
select *
from
(select a.*
from
(select *
from sc
where cid=01) a
inner join
(select *
from sc
where cid=02) b
on a.sid=b.sid
where a.score>b.score) c
left join student d
on c.sid=d.sid;



#      查询同时存在" 01 "课程和" 02 "课程的情况




#      查询存在" 01 "课程但可能不存在" 02 "课程的情况(不存在时显示为 null )
select *
FROM SC a left join SC b
on a.SId=b.SId and b.cid='02'
WHERE a.cid='01'



#      查询不存在" 01 "课程但存在" 02 "课程的情况

# 2. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩

select a.sid, a.sname, avg(b.score)  as avg_score
from student a
left join sc b
on a.sid = b.sid
group by a.sid, a.sname
having avg_score > 60;


# 3. 查询在 SC 表存在成绩的学生信息
select s.*
from sc a
left join student s
on a.sid = s.sid;

# 4. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )
select a.sid as 学生编号, b.sname as 学生姓名, count(cid) as 选课总数, sum(score) as 总成绩
from sc a
left join student b
on a.sid and b.sid
group by a.sid, b.sname
order by 总成绩 desc;

#      查有成绩的学生信息


# 5. 查询「李」姓老师的数量

select count(1)
from teacher
where teacher.tname like '李%';



# 6. 查询学过「张三」老师授课的同学的信息




# 7. 查询没有学全所有课程的同学的信息




# 8. 查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息

select *
from
(select *
from student a
left join sc b
on a.sid = b.sid
where a.sid!=01) c
where c.cid in (
    select cid
    from student a
    left join sc b
    on a.sid = b.sid
    where a.sid=01
    );





# 9. 查询和" 01 "号的同学学习的课程完全相同的其他同学的信息



# 10. 查询没学过"张三"老师讲授的任一门课程的学生姓名



# 11. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
#
# 12. 检索" 01 "课程分数小于 60，按分数降序排列的学生信息



# 13. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩




# 14. 查询各科成绩最高分、最低分和平均分：
-- 以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
-- 及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90
-- 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
SELECT CId,
MAX(score) as 最高分,
MIN(score) as 最低分,
AVG(score) as 平均分,
COUNT(1)  as 选修人数,
SUM(case when score>=60 then 1 else 0 end) / COUNT(1) as 及格率,
SUM(case when score>=70 and score< 80 then 1 else 0 end) / COUNT(1) as 中等率,
SUM(case when score>=80 and score< 90 then 1 else 0 end) / COUNT(1) as 优良率,
SUM(case when score>=90 then 1 else 0 end) / COUNT(1) as 优秀率
FROM SC
GROUP BY CId

# 15. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺
select cid
    ,rank() over (partition by cid order by score desc) as rank_num
from sc;
# 16. 查询学生的总成绩，并进行排名，总分重复时保留名次空缺
SELECT SId
      ,sum_score
      ,@rank := IF(@score1 = sum_score,@rank,@rank + 1) AS rank_num
      ,@score1 := sum_score AS 总成绩  # 保存上一次的分数
FROM (SELECT SId
            ,SUM(score) AS sum_score
      FROM sc
      GROUP BY SId
      ORDER BY SUM(score) DESC) AS a
JOIN (SELECT @rank := '',@score1 := '') AS b;


# 17. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比
#
# 18. 查询各科成绩前三名的记录
#
# 19. 查询每门课程被选修的学生数 
#
# 20. 查询出只选修两门课程的学生学号和姓名 
#
# 21. 查询男生、女生人数
#
# 22. 查询名字中含有「风」字的学生信息
#
# 23. 查询同名同性学生名单，并统计同名人数
#
# 24. 查询 1990 年出生的学生名单
#
# 25. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列
#
# 26. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 
#
# 27. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数 
select st.sid
      ,st.sname
      ,s.socre
      ,c.cname
from student as


# 28. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）
#
# 29. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数
#
# 30. 查询不及格的课程
#
# 31. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名
#
# 32. 求每门课程的学生人数 
#
# 33. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
#
# 34. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
#
# 35. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 
#
# 36. 查询每门功成绩最好的前两名
#
# 37. 统计每门课程的学生选修人数（超过 5 人的课程才统计）。
#
# 38. 检索至少选修两门课程的学生学号 
#
# 39. 查询选修了全部课程的学生信息
#
# 40. 查询各学生的年龄，只按年份来算 
select student.*
      ,floor(datediff(now(),sage)/365) '年龄'
from student;

# 41. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
# 这里 timestampdiff 会用年月日去计算 年 的相隔时间，
如果相差1.9年则为1年，所以实际上是已经相减了的，正好用来计算生日
SELECT SId AS 学生编号
      ,Sname  AS  学生姓名
      ,TIMESTAMPDIFF(YEAR,Sage,CURDATE()) AS 学生年龄
FROM student;
# 42. 查询本周过生日的学生
SELECT sid
      ,sname
      ,YEARWEEK(sage)
      ,YEARWEEK(NOW())
FROM student
WHERE YEARWEEK(sage) = YEARWEEK(NOW());
# 43. 查询下周过生日的学生
SELECT sid
      ,sname
      ,YEARWEEK(sage)
      ,YEARWEEK(NOW())
FROM student
WHERE YEARWEEK(sage) = YEARWEEK(NOW())+1;
# 44. 查询本月过生日的学生
SELECT sid
      ,sname
      ,MONTH(sage) AS "生日"
      ,MONTH(NOW())
FROM student
WHERE  MONTH(sage) = MONTH(NOW());
# 45. 查询下月过生日的学生
SELECT sid
      ,sname
      ,MONTH(sage) AS "生日"
      ,MONTH(NOW())
FROM student
WHERE  MONTH(sage) = MONTH(NOW())+1;
