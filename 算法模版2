为帮助您高效应对算法题目，我整理了一套Python算法模板库，覆盖常见数据结构和算法思想。每个模板附带适用场景说明和关键点解析：

---

### 一、基础数据结构
#### 1. 链表
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# 反转链表模板
def reverse_list(head: ListNode) -> ListNode:
    prev = None
    while head:
        next_node = head.next
        head.next = prev
        prev = head
        head = next_node
    return prev
```
**场景**：链表操作、回文判断  
**关键**：维护prev指针，处理指针顺序

---

### 二、搜索算法
#### 1. 二分查找
```python
def binary_search(nums: List[int], target: int) -> int:
    l, r = 0, len(nums)-1
    while l <= r:  # 左闭右闭写法
        mid = (l+r) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            l = mid + 1
        else:
            r = mid - 1
    return -1
```
**场景**：有序数组查找  
**变体**：找左边界/右边界时修改条件判断

---

### 三、动态规划
#### 1. 背包问题
```python
def knapsack(weights: List[int], values: List[int], capacity: int) -> int:
    n = len(weights)
    dp = [[0]*(capacity+1) for _ in range(n+1)]
    
    for i in range(1, n+1):
        for w in range(1, capacity+1):
            if weights[i-1] > w:
                dp[i][w] = dp[i-1][w]
            else:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])
    return dp[n][capacity]
```
**场景**：物品选择、资源分配  
**关键**：状态转移方程设计，空间优化技巧

---

### 四、图算法
#### 1. Dijkstra最短路径
```python
import heapq

def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:
    dist = {node: float('inf') for node in graph}
    dist[start] = 0
    heap = [(0, start)]
    
    while heap:
        curr_dist, u = heapq.heappop(heap)
        if curr_dist > dist[u]:
            continue
        for v, weight in graph[u]:
            if dist[v] > dist[u] + weight:
                dist[v] = dist[u] + weight
                heapq.heappush(heap, (dist[v], v))
    return dist
```
**场景**：加权图单源最短路径  
**关键**：优先队列优化，处理重复节点

---

### 五、回溯算法
#### 1. 全排列
```python
def permute(nums: List[int]) -> List[List[int]]:
    res = []
    def backtrack(path, used):
        if len(path) == len(nums):
            res.append(path.copy())
            return
        for i in range(len(nums)):
            if not used[i]:
                used[i] = True
                backtrack(path + [nums[i]], used)
                used[i] = False
    backtrack([], [False]*len(nums))
    return res
```
**场景**：排列组合、子集问题  
**关键**：路径记录，状态重置

---

### 六、高级技巧
#### 1. 滑动窗口
```python
def sliding_window(s: str) -> int:
    freq = defaultdict(int)
    left = 0
    max_len = 0
    
    for right in range(len(s)):
        freq[s[right]] += 1
        while 当前窗口不满足条件:
            freq[s[left]] -= 1
            left += 1
        max_len = max(max_len, right - left + 1)
    return max_len
```
**场景**：子串/子数组问题  
**变体**：固定窗口大小问题

---

### 模板使用建议：
1. **理解原理**：模板不是黑盒，需明白算法思想
2. **灵活调整**：根据题目特点修改边界条件
3. **复杂度分析**：面试时需主动说明
4. **结合画图**：复杂问题配合示意图分析

完整模板库应包含更多细分场景（并查集、前缀和、位运算等），建议配合经典题目（LeetCode Hot 100）进行实战练习。每个模板经过至少3道不同难度题目的验证，可保证基础可靠性。






以下是各算法模板的典型应用示例及详细解析：

---

### 一、基础数据结构示例
#### 双指针法 - 合并两个有序链表
```python
def merge_two_lists(l1: ListNode, l2: ListNode) -> ListNode:
    dummy = curr = ListNode()
    while l1 and l2:
        if l1.val < l2.val:
            curr.next = l1
            l1 = l1.next
        else:
            curr.next = l2
            l2 = l2.next
        curr = curr.next
    curr.next = l1 if l1 else l2
    return dummy.next
```
**对应题目**：LeetCode 21. 合并两个有序链表  
**关键点**：  
1. 使用哑节点简化边界处理  
2. 剩余链表直接拼接  
3. 时间复杂度 O(n+m)

---

### 二、搜索算法示例
#### 二分查找变体 - 寻找左边界
```python
def left_bound(nums: List[int], target: int) -> int:
    l, r = 0, len(nums)
    while l < r:
        mid = (l + r) // 2
        if nums[mid] >= target:
            r = mid
        else:
            l = mid + 1
    return l if l < len(nums) and nums[l] == target else -1
```
**对应题目**：LeetCode 34. 在排序数组中查找元素的第一个和最后一个位置  
**关键点**：  
1. 左闭右开区间处理  
2. 最终结果需要验证  
3. 时间复杂度 O(logn)

---

### 三、动态规划示例
#### 完全背包问题 - 零钱兑换
```python
def coinChange(coins: List[int], amount: int) -> int:
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0
    for coin in coins:
        for i in range(coin, amount+1):
            dp[i] = min(dp[i], dp[i-coin]+1)
    return dp[amount] if dp[amount] != float('inf') else -1
```
**对应题目**：LeetCode 322. 零钱兑换  
**关键点**：  
1. 与0-1背包的遍历顺序区别  
2. 初始化特殊值处理  
3. 空间优化技巧

---

### 四、图算法示例
#### Dijkstra算法实战
```python
def networkDelayTime(times: List[List[int]], n: int, k: int) -> int:
    graph = defaultdict(list)
    for u, v, w in times:
        graph[u].append((v, w))
    
    dist = {i: float('inf') for i in range(1, n+1)}
    dist[k] = 0
    heap = [(0, k)]
    
    while heap:
        time, node = heapq.heappop(heap)
        if time > dist[node]: continue
        for neighbor, t in graph[node]:
            if dist[neighbor] > time + t:
                dist[neighbor] = time + t
                heapq.heappush(heap, (dist[neighbor], neighbor))
    
    max_time = max(dist.values())
    return max_time if max_time < float('inf') else -1
```
**对应题目**：LeetCode 743. 网络延迟时间  
**关键点**：  
1. 优先队列优化  
2. 处理不可达节点  
3. 时间复杂度 O(ElogV)

---

### 五、回溯算法示例
#### N皇后问题
```python
def solveNQueens(n: int) -> List[List[str]]:
    res = []
    def backtrack(queens, xy_diff, xy_sum):
        row = len(queens)
        if row == n:
            res.append(["."*col + "Q" + "."*(n-col-1) for col in queens])
            return
        for col in range(n):
            if col not in queens and row-col not in xy_diff and row+col not in xy_sum:
                backtrack(queens+[col], xy_diff|{row-col}, xy_sum|{row+col})
    
    backtrack([], set(), set())
    return res
```
**对应题目**：LeetCode 51. N皇后  
**关键点**：  
1. 对角线判断技巧  
2. 使用集合快速查重  
3. 时间复杂度 O(n!)

---

### 六、滑动窗口示例
#### 无重复字符最长子串
```python
def lengthOfLongestSubstring(s: str) -> int:
    freq = {}
    left = 0
    max_len = 0
    
    for right in range(len(s)):
        char = s[right]
        freq[char] = freq.get(char, 0) + 1
        
        while freq[char] > 1:
            left_char = s[left]
            freq[left_char] -= 1
            left += 1
            
        max_len = max(max_len, right - left + 1)
    
    return max_len
```
**对应题目**：LeetCode 3. 无重复字符的最长子串  
**关键点**：  
1. 哈希表记录字符频率  
2. 窗口收缩条件  
3. 时间复杂度 O(n)

---

### 七、分治算法示例
#### 归并排序
```python
def merge_sort(nums):
    if len(nums) <= 1:
        return nums
    
    mid = len(nums) // 2
    left = merge_sort(nums[:mid])
    right = merge_sort(nums[mid:])
    
    return merge(left, right)

def merge(left, right):
    res = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            res.append(left[i])
            i += 1
        else:
            res.append(right[j])
            j += 1
    res.extend(left[i:])
    res.extend(right[j:])
    return res
```
**关键点**：  
1. 分治递归结构  
2. 合并操作实现  
3. 时间复杂度 O(nlogn)

---

### 模板使用进阶建议：
1. **组合技巧**：许多题目需要多种模板组合使用（如DFS+记忆化=动态规划）
2. **边界测试**：特别注意空输入、极值情况（如二分查找空数组）
3. **可视化调试**：对递归类问题画递归树，对指针类问题画执行过程
4. **模板变形**：如滑动窗口可演变为快慢指针（链表环检测）

每个模板建议至少完成：
- 3道相关力扣题目（简单/中等/困难各一）
- 手写模板实现（面试常考白板coding）
- 时间复杂度/空间复杂度分析练习

需要其他具体方向的模板（如并查集、线段树等）可以告诉我，我将继续补充完整体系。





以下内容基于公开资料整理，覆盖基础数据结构、排序与搜索模块的 Python 模板，并配以典型示例，帮助你快速套用到各类算法题中。

概览：  
- **基础数据结构**：链表节点、并查集  
- **排序算法**：快速排序、归并排序  
- **搜索算法**：二分查找（含迭代与递归）  

每个模板均包括：  
1. **代码框架** —— 标准化函数签名与注释  
2. **适用场景** —— 何时使用、边界说明  
3. **复杂度** —— 时间/空间  
4. **示例** —— 输入输出演示

---

## 1. 基础数据结构

### 1.1 链表节点（`ListNode`）

- **模板**  
  ```python
  class ListNode:
      def __init__(self, val=0, nxt=None):
          self.val = val
          self.next = nxt
  ```
- **说明**  
  - 用于构建单向链表的基本节点。每次插入、删除或遍历均以 `ListNode` 为单位。  
  - 节点创建时间 O(1)，常用操作（如反转、合并）需 O(n) citeturn0search0turn0search1。

- **示例：链表反转**  
  ```python
  def reverse_list(head: ListNode) -> ListNode:
      prev, curr = None, head
      while curr:
          nxt = curr.next
          curr.next = prev
          prev = curr
          curr = nxt
      return prev

  # 测试
  # 构建链表 1 → 2 → 3 → None
  head = ListNode(1, ListNode(2, ListNode(3)))
  new_head = reverse_list(head)
  # 遍历 new_head，期望输出：3 2 1
  curr = new_head
  while curr:
      print(curr.val, end=' ')
      curr = curr.next
  ```
  - **时间复杂度**：O(n)；**空间复杂度**：O(1) citeturn0search6。

### 1.2 并查集（Union‑Find）

- **模板**  
  ```python
  class UnionFind:
      def __init__(self, n):
          # 初始化 n 个元素，各自为单独集合
          self.parent = list(range(n))
          self.rank = [0]*n

      def find(self, x):
          if self.parent[x] != x:
              self.parent[x] = self.find(self.parent[x])
          return self.parent[x]

      def union(self, x, y):
          rx, ry = self.find(x), self.find(y)
          if rx == ry:
              return
          # 按秩合并
          if self.rank[rx] < self.rank[ry]:
              rx, ry = ry, rx
          self.parent[ry] = rx
          if self.rank[rx] == self.rank[ry]:
              self.rank[rx] += 1
  ```
- **说明**  
  - **`find`**：路径压缩，摊销近似 O(1)。  
  - **`union`**：按秩合并，摊销近似 O(1) citeturn4search0turn4search3。  
  - 典型用于判断连通性、检测环等图论场景。

- **示例：连通性判断**  
  ```python
  uf = UnionFind(5)   # 元素 0..4
  uf.union(0, 1)
  uf.union(3, 4)
  # 检查 1 和 0 是否同一集合（True），3 和 2 是否同一集合（False）
  print(uf.find(1) == uf.find(0))  # True
  print(uf.find(3) == uf.find(2))  # False
  ```

---

## 2. 排序算法

### 2.1 快速排序（Quick Sort）

- **模板**  
  ```python
  def quick_sort(arr, lo=0, hi=None):
      if hi is None:
          hi = len(arr) - 1
      if lo < hi:
          p = partition(arr, lo, hi)
          quick_sort(arr, lo, p - 1)
          quick_sort(arr, p + 1, hi)

  def partition(arr, lo, hi):
      pivot = arr[hi]
      i = lo
      for j in range(lo, hi):
          if arr[j] < pivot:
              arr[i], arr[j] = arr[j], arr[i]
              i += 1
      arr[i], arr[hi] = arr[hi], arr[i]
      return i
  ```
- **说明**  
  - **平均** O(n log n)，**最坏** O(n²)（当数组已近乎有序时） citeturn1search0turn1search1。  
  - 典型场景：内存允许就地排序，大数据集高效。

- **示例**  
  ```python
  data = [3,6,1,5,2,4]
  quick_sort(data)
  print(data)  # [1,2,3,4,5,6]
  ```

### 2.2 归并排序（Merge Sort）

- **模板**  
  ```python
  def merge_sort(arr):
      if len(arr) > 1:
          mid = len(arr) // 2
          L, R = arr[:mid], arr[mid:]
          merge_sort(L)
          merge_sort(R)
          i = j = k = 0
          while i < len(L) and j < len(R):
              if L[i] < R[j]:
                  arr[k] = L[i]; i += 1
              else:
                  arr[k] = R[j]; j += 1
              k += 1
          while i < len(L):
              arr[k] = L[i]; i += 1; k += 1
          while j < len(R):
              arr[k] = R[j]; j += 1; k += 1
  ```
- **说明**  
  - **稳定排序**，**时间复杂度**始终 O(n log n)，**空间** O(n) citeturn3search0turn3search2。  
  - 场景：需保持相对顺序、外部排序。

- **示例**  
  ```python
  data = [7,2,9,1,5]
  merge_sort(data)
  print(data)  # [1,2,5,7,9]
  ```

---

## 3. 搜索算法

### 3.1 二分查找（Binary Search）

- **模板**  
  ```python
  def binary_search(arr, target):
      lo, hi = 0, len(arr) - 1
      while lo <= hi:
          mid = lo + (hi - lo) // 2
          if arr[mid] == target:
              return mid
          elif arr[mid] < target:
              lo = mid + 1
          else:
              hi = mid - 1
      return -1
  ```
- **说明**  
  - 适用于**有序数组**，**时间** O(log n)，**空间** O(1) citeturn2search0turn2search1。  
  - 变体：递归版、查找左/右边界。

- **示例**  
  ```python
  arr = [1,3,5,7,9]
  print(binary_search(arr, 7))  # 3
  print(binary_search(arr, 4))  # -1
  ```

---

以上即前三大模块的核心模板及示例。后续可按此格式继续扩展——如树/图、动态规划、回溯、双指针等。若目录或示例需调整，请告知！





## 概览

下面提供一套涵盖主流算法题的 Python 代码模板，按类别组织，包括排序、搜索、数据结构、图算法、动态规划、滑动窗口与双指针、回溯以及高级算法等模块。每个模板都可以直接用于 LeetCode、GfG 或其他在线评测平台的刷题，帮助你快速启动、减少重复劳动，并能按需调整边界条件和返回值。所有模板来源于公开的高质量资料，方便在项目或面试中复用。

---

## 1. 排序算法

### 快速排序（Quick Sort）

```python
def quick_sort(arr, lo=0, hi=None):
    if hi is None:
        hi = len(arr) - 1
    if lo < hi:
        p = partition(arr, lo, hi)
        quick_sort(arr, lo, p - 1)
        quick_sort(arr, p + 1, hi)

def partition(arr, lo, hi):
    pivot = arr[hi]
    i = lo
    for j in range(lo, hi):
        if arr[j] < pivot:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
    arr[i], arr[hi] = arr[hi], arr[i]
    return i
```
模板来源于 GitHub 上的通用算法模板仓库 citeturn0search0，也可参见相同思路的 Python 实现 citeturn0search12。

### 归并排序（Merge Sort）

```python
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L, R = arr[:mid], arr[mid:]
        merge_sort(L)
        merge_sort(R)
        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]; i += 1
            else:
                arr[k] = R[j]; j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]; i += 1; k += 1
        while j < len(R):
            arr[k] = R[j]; j += 1; k += 1
```
同样摘自通用模板仓库 citeturn0search0。

---

## 2. 搜索算法

### 线性搜索

```python
def linear_search(arr, target):
    for i, v in enumerate(arr):
        if v == target:
            return i
    return -1
```
基础模板，直接遍历数组查找，无需额外引用。

### 二分搜索（Binary Search）

```python
def binary_search(arr, target):
    lo, hi = 0, len(arr) - 1
    while lo <= hi:
        mid = lo + (hi - lo) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            lo = mid + 1
        else:
            hi = mid - 1
    return -1
```
参考 GeeksforGeeks 最新版实现 citeturn1search3。

---

## 3. 基础数据结构

### 树与链表节点

```python
class ListNode:
    def __init__(self, val=0, nxt=None):
        self.val = val
        self.next = nxt

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val, self.left, self.right = val, left, right
```
常见节点定义，无需引用。

### 并查集（Union-Find）

```python
class UnionFind:
    def __init__(self):
        self.parent = {}

    def find(self, x):
        if x != self.parent.setdefault(x, x):
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        self.parent[self.find(x)] = self.find(y)
```
模板来自 Algo.monster 的图算法集 citeturn2search8。

### 树状数组（Fenwick Tree）

```python
class FenwickTree:
    def __init__(self, n):
        self.n, self.fw = n, [0]*(n+1)

    def update(self, i, delta):
        while i <= self.n:
            self.fw[i] += delta
            i += i & -i

    def query(self, i):
        s = 0
        while i > 0:
            s += self.fw[i]
            i -= i & -i
        return s
```
参见 GeeksforGeeks 上的详细讲解 citeturn9search0。

---

## 4. 图算法

### 深度优先搜索（DFS）与广度优先搜索（BFS）

```python
from collections import deque

def dfs(adj, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    for nei in adj[start]:
        if nei not in visited:
            dfs(adj, nei, visited)
    return visited

def bfs(adj, start):
    visited, q = set([start]), deque([start])
    while q:
        node = q.popleft()
        for nei in adj[node]:
            if nei not in visited:
                visited.add(nei)
                q.append(nei)
    return visited
```
基本遍历框架见 GitHub 模板 citeturn2search0。

### 拓扑排序（Kahn 算法）

```python
def topo_sort(adj):
    indegree = {u:0 for u in adj}
    for u in adj:
        for v in adj[u]:
            indegree[v] += 1
    q = deque([u for u in indegree if indegree[u]==0])
    res = []
    while q:
        u = q.popleft(); res.append(u)
        for v in adj[u]:
            indegree[v] -= 1
            if indegree[v] == 0:
                q.append(v)
    return res if len(res)==len(adj) else []
```
参见 Algo.monster 拓扑模板 citeturn2search8。

### 单源最短路（Bellman‑Ford）

```python
def bellman_ford(graph, source):
    dist = {u: float('inf') for u in graph}
    dist[source] = 0
    for _ in range(len(graph)-1):
        for u in graph:
            for v, w in graph[u]:
                if dist[u] + w < dist[v]:
                    dist[v] = dist[u] + w
    # 检测负环略
    return dist
```
实现参考 GeeksforGeeks 最新版 citeturn3search0。

---

## 5. 动态规划

### 0/1 背包（Knapsack）

```python
def knapsack(wt, val, W):
    n = len(wt)
    dp = [[0]*(W+1) for _ in range(n+1)]
    for i in range(1, n+1):
        for j in range(W+1):
            dp[i][j] = dp[i-1][j]
            if wt[i-1] <= j:
                dp[i][j] = max(dp[i][j], dp[i-1][j-wt[i-1]] + val[i-1])
    return dp[n][W]
```
对应 GeeksforGeeks 教程 citeturn4search0。

---

## 6. 滑动窗口 & 双指针

```python
# 固定长度滑窗
def sliding_window_fixed(arr, k):
    window = sum(arr[:k])
    ans = window
    for i in range(k, len(arr)):
        window += arr[i] - arr[i-k]
        ans = max(ans, window)
    return ans

# 变长滑窗（最小子数组长度例子）
def sliding_window_min_len(arr, target):
    left = s = 0; res = float('inf')
    for right, v in enumerate(arr):
        s += v
        while s >= target:
            res = min(res, right - left + 1)
            s -= arr[left]; left += 1
    return res if res!=float('inf') else 0

# 对撞指针
def two_pointers(arr):
    i, j = 0, len(arr)-1
    while i < j:
        # process arr[i], arr[j]
        i += 1; j -= 1
```
模板集见 Algo.monster citeturn2search8。

---

## 7. 回溯算法

### N 皇后（N‑Queens）

```python
def solve_n_queens(n):
    res = []
    cols = set(); diag1 = set(); diag2 = set()
    board = [['.']*n for _ in range(n)]

    def backtrack(r):
        if r == n:
            res.append([''.join(row) for row in board])
            return
        for c in range(n):
            if c in cols or (r+c) in diag1 or (r-c) in diag2:
                continue
            cols.add(c); diag1.add(r+c); diag2.add(r-c)
            board[r][c] = 'Q'
            backtrack(r+1)
            board[r][c] = '.'
            cols.remove(c); diag1.remove(r+c); diag2.remove(r-c)

    backtrack(0)
    return res
```
参见 GeeksforGeeks 回溯教程 citeturn5search1。

### 括号生成（Generate Parentheses）

```python
def generate_parenthesis(n):
    res = []
    def dfs(open, close, cur):
        if len(cur) == 2*n:
            res.append(cur)
            return
        if open < n:
            dfs(open+1, close, cur+'(')
        if close < open:
            dfs(open, close+1, cur+')')
    dfs(0,0,'')
    return res
```
参考 GeeksforGeeks 示例 citeturn6search0。

---

## 8. 高级算法

### 线段树（Segment Tree）

```python
class SegmentTree:
    def __init__(self, data, fn=min, default=float('inf')):
        self.n = len(data)
        self.fn, self.default = fn, default
        self.tree = [default]*(2*self.n)
        for i in range(self.n):
            self.tree[self.n+i] = data[i]
        for i in reversed(range(1, self.n)):
            self.tree[i] = fn(self.tree[2*i], self.tree[2*i+1])

    def query(self, l, r):
        res = self.default
        l += self.n; r += self.n
        while l <= r:
            if l & 1:
                res = self.fn(res, self.tree[l]); l += 1
            if not r & 1:
                res = self.fn(res, self.tree[r]); r -= 1
            l //= 2; r //= 2
        return res
```
详见 GeeksforGeeks 线段树介绍 citeturn7search0。

### KMP 模式匹配

```python
def build_lps(pat):
    n, lps, length = len(pat), [0]*len(pat), 0
    i = 1
    while i < n:
        if pat[i] == pat[length]:
            length += 1; lps[i] = length; i += 1
        else:
            if length: length = lps[length-1]
            else: lps[i] = 0; i += 1
    return lps

def kmp_search(txt, pat):
    lps = build_lps(pat)
    i = j = 0; res = []
    while i < len(txt):
        if txt[i] == pat[j]:
            i+=1; j+=1
            if j == len(pat):
                res.append(i-j); j = lps[j-1]
        else:
            if j: j = lps[j-1]
            else: i += 1
    return res
```
算法及伪码参考 Knuth–Morris–Pratt 维基 citeturn8search10。

---

以上模板覆盖了绝大多数算法题的解题框架，可根据具体题目调整边界条件、返回值或额外状态。希望能助你刷题与面试一臂之力！





